#!/usr/bin/env python3
"""
cve_scraper.py
Scrapes CVE search results from the NVD API using keywords, stores them in SQLite,
and sends email alerts when new CVEs are found. Runs periodically based on config.
Configuration file 'config.json' structure (no SMTP credentials):
{
  "keywords": ["rapidjson","hsm"],
  "interval_hours": 2,
  "email": {
    "smtp_server": "smtp.example.com",
    "smtp_port": 587,
    "use_tls": true,
    "from": "mail@example.com",
    "to": ["mail_to_send@example.com"]
  }
}

Docker secrets must be mounted at:
  /run/secrets/smtp_user  => SMTP username
  /run/secrets/smtp_pass  => SMTP password
"""

import os
import json
import time
import logging
import sqlite3
import requests
import schedule
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)

# Constants
API_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0"
DEFAULT_RESULTS_PER_PAGE = 50
HEADERS = {"User-Agent": "Mozilla/5.0 (compatible; CVEScraper/1.0)"}
CONFIG_PATH = os.getenv('CONFIG_PATH', 'config.json')
DB_PATH     = os.getenv('DB_PATH', 'cve_records.db')
TABLE_NAME  = 'cve_records'


def read_secret(path):
    try:
        with open(path, 'r') as f:
            return f.read().strip()
    except Exception:
        return None


def load_config(path):
    with open(path, 'r') as f:
        cfg = json.load(f)
    if 'keywords' not in cfg or not isinstance(cfg['keywords'], list):
        raise ValueError("'keywords' missed or it isn't a list")
    cfg.setdefault('interval_hours', 2)
    if 'email' not in cfg:
        raise ValueError("'email' missed in config")
    return cfg


def init_db(path):
    conn = sqlite3.connect(path)
    c = conn.cursor()
    c.execute(f"""
        CREATE TABLE IF NOT EXISTS {TABLE_NAME} (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            keyword TEXT NOT NULL,
            cve_id TEXT NOT NULL,
            description TEXT,
            details_url TEXT,
            UNIQUE(cve_id)
        )
    """)
    conn.commit()
    return conn


def fetch_search_results(keyword):
    params = {
        'keywordSearch': keyword,
        'resultsPerPage': DEFAULT_RESULTS_PER_PAGE
    }
    logging.info(f"Quering NVD API per keyword: {keyword}")
    resp = requests.get(API_URL, params=params, headers=HEADERS, timeout=10)
    resp.raise_for_status()
    return resp.json()


def parse_results(data, keyword):
    results = []
    # 'vulnerabilities' list
    for item in data.get('vulnerabilities', []):
        cve = item.get('cve', {})
        cve_id = cve.get('id')
        # descriptions list of dicts
        desc_list = cve.get('descriptions', [])
        description = ''
        for d in desc_list:
            if d.get('lang') == 'en':
                description = d.get('value', '')
                break
        details_url = f"https://nvd.nist.gov/vuln/detail/{cve_id}" if cve_id else ''
        results.append((keyword, cve_id, description, details_url))
    return results


def save_results(conn, records):
    new_records = []
    c = conn.cursor()
    for keyword, cve_id, desc, url in records:
        c.execute(
            f"INSERT OR IGNORE INTO {TABLE_NAME} "
            "(keyword, cve_id, description, details_url) VALUES (?, ?, ?, ?)",
            (keyword, cve_id, desc, url)
        )
        if c.rowcount > 0:
            new_records.append((keyword, cve_id, desc, url))
    conn.commit()
    return new_records


def send_email_alert(cfg_email, new_records):
    smtp_user = os.getenv('SMTP_USER') or read_secret(os.getenv('SMTP_USER_FILE', '/run/secrets/smtp_user'))
    smtp_pass = os.getenv('SMTP_PASS') or read_secret(os.getenv('SMTP_PASS_FILE', '/run/secrets/smtp_pass'))

    server = smtplib.SMTP(cfg_email['smtp_server'], cfg_email['smtp_port'])
    if cfg_email.get('use_tls', True):
        server.starttls()
    server.login(smtp_user, smtp_pass)

    msg = MIMEMultipart()
    msg['From'] = cfg_email['from']
    msg['To'] = ', '.join(cfg_email['to'])
    msg['Subject'] = f"[ALERT] {len(new_records)} new CVE found"

    lines = [f"New CVE at {time.strftime('%Y-%m-%d %H:%M:%S')}:"]
    for kw, cve_id, desc, url in new_records:
        lines.append(f"- {cve_id} ({kw}): {desc}\n  Detail: {url}")
    msg.attach(MIMEText("\n".join(lines), 'plain'))

    server.sendmail(cfg_email['from'], cfg_email['to'], msg.as_string())
    server.quit()
    logging.info(f"Email alert send to: {cfg_email['to']}")


def job(cfg, conn):
    logging.info("Start job scraping to NVD API")
    all_new = []
    for kw in cfg['keywords']:
        try:
            data = fetch_search_results(kw)
            recs = parse_results(data, kw)
            new = save_results(conn, recs)
            if new:
                logging.info(f"Found {len(new)} new CVE per keyword '{kw}'")
                all_new.extend(new)
        except Exception as e:
            logging.error(f"Error processing '{kw}': {e}")
    if all_new:
        send_email_alert(cfg['email'], all_new)
    logging.info("Job completed")


def main():
    cfg  = load_config(CONFIG_PATH)
    conn = init_db(DB_PATH)

    job(cfg, conn)
    schedule.every(cfg['interval_hours']).hours.do(job, cfg=cfg, conn=conn)

    try:
        while True:
            schedule.run_pending()
            time.sleep(60)
    except KeyboardInterrupt:
        logging.info("Interrupted")
    finally:
        conn.close()


if __name__ == '__main__':
    main()
